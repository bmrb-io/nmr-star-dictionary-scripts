-- 
-- Create tables for validation dictionary
-- 
-- This script is used when creating validation dictionary tables
-- from main NMR-STAR dictionary tables. Main dictionary does not
-- include enumerations for mandatory codes and data types.
--
DROP TABLE IF EXISTS INFO;
DROP TABLE IF EXISTS STARCH;
DROP TABLE IF EXISTS DATUMTYPES;
DROP TABLE IF EXISTS TAGDEPS;
DROP TABLE IF EXISTS VALENUMS;
DROP TABLE IF EXISTS TAGRELS;
DROP TABLE IF EXISTS TAGS;
DROP TABLE IF EXISTS SFCATS;
DROP TABLE IF EXISTS SFMANENUM;
DROP TABLE IF EXISTS TAGMANENUM;
DROP TABLE IF EXISTS VALTYPENUM;
DROP TABLE IF EXISTS DDLTYPES;

--
--  utility tables
--
CREATE TABLE INFO (
  DMODE INTEGER NOT NULL,
  VERSION VARCHAR(15) NOT NULL,
  DICTFLAG CHAR(1) NOT NULL
);

-- 
-- enumeration of SF mandatory status codes
-- 
CREATE TABLE SFMANENUM (
 MANDATORY CHAR(1) PRIMARY KEY,
 DESCRIPTION VARCHAR(80) 
);

INSERT INTO SFMANENUM (MANDATORY, DESCRIPTION) VALUES ('I', 'invalid');
INSERT INTO SFMANENUM (MANDATORY, DESCRIPTION) VALUES ('M', 'mandatory, must be present');
INSERT INTO SFMANENUM (MANDATORY, DESCRIPTION) VALUES ('O', 'optional');

--
-- SF categories 
--
CREATE TABLE SFCATS (
 ID INTEGER PRIMARY KEY,
 SFCAT varchar(80) NOT NULL,
 UNIQ char(1) NOT NULL,
 MANDATORY char(1) NOT NULL, 
 UNIQUE (SFCAT),
 FOREIGN KEY (MANDATORY) REFERENCES SFMANENUM (MANDATORY)
);

--
-- Tag mandatory status codes
--
CREATE TABLE TAGMANENUM (
 MANDATORY char(1) PRIMARY KEY,
 DESCRIPTION varchar(80) );

INSERT INTO TAGMANENUM (MANDATORY, DESCRIPTION) VALUES ('I', 'invalid');
INSERT INTO TAGMANENUM (MANDATORY, DESCRIPTION) VALUES ('O', 'optional');
INSERT INTO TAGMANENUM (MANDATORY, DESCRIPTION) VALUES ('T', 'tag-conditional: if another tag is present see TAGDEPS, optional otherwise');
INSERT INTO TAGMANENUM (MANDATORY, DESCRIPTION) VALUES ('C', 'conditional: mandatory if saveframe is present');
INSERT INTO TAGMANENUM (MANDATORY, DESCRIPTION) VALUES ('R', 'value-conditional: value required if saveframe is present');
INSERT INTO TAGMANENUM (MANDATORY, DESCRIPTION) VALUES ('M', 'mandatory, ? allowed but not .');
INSERT INTO TAGMANENUM (MANDATORY, DESCRIPTION) VALUES ('V', 'value required: mandatory, neither ? nor . is allowed');

-- 
-- Data types
-- 
CREATE TABLE VALTYPENUM (
 VALTYPE VARCHAR(9) PRIMARY KEY,
 DESCRIPTION VARCHAR(80) );

INSERT INTO VALTYPENUM (VALTYPE, DESCRIPTION) VALUES ('STRING', 'value is a text string: [var]char, text');
INSERT INTO VALTYPENUM (VALTYPE, DESCRIPTION) VALUES ('INTEGER', 'value is an integer');
INSERT INTO VALTYPENUM (VALTYPE, DESCRIPTION) VALUES ('FLOAT', 'value is a floating-point number');
INSERT INTO VALTYPENUM (VALTYPE, DESCRIPTION) VALUES ('DATE', 'value is a date string in ISO 8601 format');
INSERT INTO VALTYPENUM (VALTYPE, DESCRIPTION) VALUES ('FRAMECODE', 'value is a framecode: dollar sign followed by saveframe label');

--
-- DDL types: replacement for data types above
--
CREATE TABLE DDLTYPES (
 DDLTYPE VARCHAR(24) PRIMARY KEY,
 REGEXP VARCHAR(80) NOT NULL,
 DESCRIPTION VARCHAR(127)
);

--
-- Tags
--
CREATE TABLE TAGS (
 SEQ INTEGER PRIMARY KEY,
 SFCAT VARCHAR(80) NOT NULL,
 TAGNAME VARCHAR(127) NOT NULL,
 TAGCAT VARCHAR(60) NOT NULL,
 DBTABLE VARCHAR(127), -- NOT NULL,
 DBCOLUMN VARCHAR(127), -- NOT NULL,
 DBTYPE VARCHAR(127), -- NOT NULL,
 DBNOTNULL CHAR(1),
 DBPK CHAR(1),
 DBFKTABLE VARCHAR(127),
 DBFKCOLUMN VARCHAR(127),
 DBFKGROUP VARCHAR(5),
 VALTYPE VARCHAR(9) NOT NULL,
 VALSIZE INTEGER,
 MANDATORY CHAR(1) NOT NULL,
 TAGDEPFLAG CHAR(1),
 ENUMCLOSEDFLAG CHAR(1),
 ROWIDXFLAG CHAR(1),
 LOCALIDFLAG CHAR(1),
 SFIDFLAG CHAR(1),
 ENTRYIDFLAG CHAR(1),
 SFLABELFLAG CHAR(1),
 SFCATFLAG CHAR(1),
 SFLINKFLAG CHAR(1),
 LOOPFLAG CHAR(1),
 LOOPMANDATORY CHAR(1),
 DATUMCOUNT CHAR(1),
 METADATA CHAR(1),
 DELETEFLAG CHAR(1),
 ADITDEFAULT VARCHAR(80),
 ADITAUTO CHAR(1),
 FOREIGN KEY (SFCAT) REFERENCES SFCATS (SFCAT),
 FOREIGN KEY (MANDATORY) REFERENCES TAGMANENUM (MANDATORY),
 FOREIGN KEY (VALTYPE) REFERENCES VALTYPENUM (VALTYPE)
);

-- 
-- Value enumerations
-- 
CREATE TABLE VALENUMS (
 SEQ INTEGER NOT NULL,
 VAL VARCHAR(127) NOT NULL,
 PRIMARY KEY(SEQ,VAL),
 FOREIGN KEY (SEQ) REFERENCES TAGS (SEQ)
);

--
-- Dependent values
--
CREATE TABLE TAGDEPS (
 CTLSEQ INTEGER NOT NULL,
 CTLVALUE VARCHAR(80),
 MANDATORY CHAR(1) NOT NULL,
 SEQ INTEGER NOT NULL,
 FOREIGN KEY (MANDATORY) REFERENCES TAGMANENUM (MANDATORY),
 FOREIGN KEY (CTLSEQ) REFERENCES TAGS (SEQ),
 FOREIGN KEY (SEQ) REFERENCES TAGS (SEQ)
);

-- 
-- parent-child relationships
-- 
CREATE TABLE TAGRELS (
 PRNTSEQ INTEGER NOT NULL,
 CHLDSEQ INTEGER NOT NULL,
 FOREIGN KEY (PRNTSEQ) REFERENCES TAGS (SEQ),
 FOREIGN KEY (CHLDSEQ) REFERENCES TAGS (SEQ)
);

--
-- Datum types
--
CREATE TABLE DATUMTYPES (
 TAGCAT VARCHAR(60) PRIMARY KEY,
 DATUMTYPE VARCHAR(127) NOT NULL,
 TABLEGEN CHAR(1) NOT NULL
);

--
-- STARch
--
CREATE TABLE STARCH (
 TAGNAME VARCHAR(127) PRIMARY KEY,
 DISPLSEQ INTEGER NOT NULL,
 DISPLNAME VARCHAR(63) NOT NULL,
 SEQID CHAR(1),
 COMPIDXID CHAR(1),
 COMPID CHAR(1),
 ATOMID CHAR(1),
 ATOMTYPE CHAR(1),
 ISOTOPE CHAR(1),
 AMBICODE CHAR(1),
 GROUPID CHAR(1),
 VAL CHAR(1),
 MINVAL CHAR(1),
 MAXVAL CHAR(1),
 ERR CHAR(1),
 ROWIDX CHAR(1),
 AUTHOR CHAR(1),
 TABLEGEN CHAR(1),
 FOREIGN KEY (TAGNAME) REFERENCES TAGS (TAGNAME)
);
